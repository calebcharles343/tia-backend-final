{
  "swagger": "2.0",
  "info": {
    "title": "Tunga Backend Final Project. E-commerce API by Charles Caleb",
    "description": "Comprehensive API documentation for e-commerce application",
    "version": "1.0.0"
  },
  "host": "tia-backend-final.onrender.com",
  "basePath": "/api/v1/e-commerce",
  "schemes": ["https"],
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
    }
  },
  "security": [{ "Bearer": [] }],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": ["User Auth"],
        "description": "Register a new user account. Provide the necessary details to create a new user profile.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User registration details including name, email, and password.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "email": { "type": "string" },
                "password": { "type": "string" },
                "confirm_password": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "201": { "description": "User successfully registered." },
          "400": { "description": "Invalid input data." },
          "409": { "description": "User or email already exists." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User Auth"],
        "description": "Authenticate a user and return a JWT token. The token should be included in the Authorization header for subsequent requests.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User login credentials including email and password.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Login successful." },
          "400": { "description": "Invalid login credentials." },
          "404": { "description": "User not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["User Auth"],
        "description": "Log out user. User has to be logged in to log out.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "User logged out successfully." },
          "404": { "description": "User has to be logged in to log out." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "tags": ["User Auth"],
        "description": "Initiate a password reset request. An email with a reset token will be sent to the registered email address.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Email address of the user requesting a password reset.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Password reset email sent successfully." },
          "404": { "description": "User not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/resetPassword/{token}": {
      "patch": {
        "tags": ["User Auth"],
        "description": "Reset the user's password using the provided reset token.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Password reset token sent via email."
          },
          {
            "name": "body",
            "in": "body",
            "description": "New password details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": { "type": "string" },
                "passwordConfirm": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Password reset successfully." },
          "404": { "description": "Invalid or expired reset token." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/updatePassword": {
      "patch": {
        "tags": ["User Auth"],
        "description": "Update the user's password. The user must be authenticated.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Current and new password details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "passwordCurrent": { "type": "string" },
                "password": { "type": "string" },
                "passwordConfirm": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Password updated successfully." },
          "400": { "description": "Invalid input data." },
          "404": { "description": "User not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["User Management"],
        "description": "Retrieve a list of all users. This operation is restricted to admin users.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "Users retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/closedAccounts": {
      "get": {
        "tags": ["User Management"],
        "description": "Retrieve a list of all deleted users. This operation is restricted to admin users.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "Deleted Users retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users/user": {
      "get": {
        "tags": ["User Management"],
        "description": "Retrieve current user.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "User retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/users/user/updateMe": {
      "patch": {
        "tags": ["User Management"],
        "description": "Update a user account",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User Updating details including name and email.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "email": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "User updated successfully." },
          "400": { "description": "Invalid user ID." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "User not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/users//user/deleteMe": {
      "delete": {
        "tags": ["User Management"],
        "description": "Delete a user account.",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "User deleted successfully." },
          "400": { "description": "Invalid user ID." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "User not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/products/create": {
      "post": {
        "tags": ["Product"],
        "description": "Add product to the store. Login is required and restricted to admin users.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Product credentials include name, description, category, price, and stock.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "description": { "type": "string" },
                "category": { "type": "string" },
                "price": { "type": "number" },
                "stock": { "type": "number" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Product added successfully." },
          "400": {
            "description": "You do not have permission to perform this action."
          },
          "404": { "description": "Login required." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Product"],
        "description": "Retrieve a list of all products. Login is required.",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "Products retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": ["Product"],
        "description": "Retrieve a product by ID. Login is required.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to retrieve."
          }
        ],
        "responses": {
          "200": { "description": "Product retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/products/update/{productId}": {
      "patch": {
        "tags": ["Product"],
        "description": "Update a product by ID. Login is required and restricted to admin users.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to update."
          },
          {
            "name": "body",
            "in": "body",
            "description": "New product details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "description": { "type": "string" },
                "category": { "type": "string" },
                "price": { "type": "number" },
                "stock": { "type": "number" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Product updated successfully." },
          "404": {
            "description": "No product with the provided ID available in the shop."
          },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/products/delete/{productId}": {
      "delete": {
        "tags": ["Product"],
        "description": "Delete a product. Login is required and restricted to admin users.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to delete."
          }
        ],
        "responses": {
          "200": { "description": "Product deleted successfully." },
          "400": { "description": "Invalid product ID." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/orders/create": {
      "post": {
        "tags": ["Order"],
        "description": "Create a new order. Login is required.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Order details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "productId": { "type": "number" },
                      "quantity": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Order created successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/orders/administrator": {
      "get": {
        "tags": ["Order"],
        "description": "Retrieve entire customer orders restricted to Admin. Login is required.",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "Admin orders retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": ["Order"],
        "description": "Retrieve orders of the logged-in user. Login is required.",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "Orders retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/orders/update/{orderId}": {
      "patch": {
        "tags": ["Order"],
        "description": "Update the status of an order by ID restricted to Admin. Login is required.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the order to update."
          },
          {
            "name": "body",
            "in": "body",
            "description": "Status update for the order.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": ["pending", "completed", "cancelled"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Order status updated successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Order not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/orders/cancel/{orderId}": {
      "patch": {
        "tags": ["Order"],
        "description": "Cancel order by ID. Login is required.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the order to cancel."
          },
          {
            "name": "body",
            "in": "body",
            "description": "Cancel order.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": ["cancelled"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Order Cancelled successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Order not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/orders/delete/{orderId}": {
      "delete": {
        "tags": ["Order"],
        "description": "Delete an order by ID. Login is required and restricted to admin users.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the order to delete."
          }
        ],
        "responses": {
          "200": { "description": "Order deleted successfully." },
          "401": { "description": "Unauthorized access." },
          "403": { "description": "Access restricted to admin users." },
          "404": { "description": "Order not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/reviews/create/{productId}": {
      "post": {
        "tags": ["Review"],
        "description": "Create a review for a product. Login is required.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to review."
          },
          {
            "name": "body",
            "in": "body",
            "description": "Review details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "review": { "type": "string" },
                "rating": { "type": "number", "minimum": 1, "maximum": 5 }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Review created successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/reviews/update/{productId}/{reviewId}": {
      "patch": {
        "tags": ["Review"],
        "description": "Update a review for a product. Login is required.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to update the review for."
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the review to update."
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated review details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "review": { "type": "string" },
                "rating": { "type": "number", "minimum": 1, "maximum": 5 }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Review updated successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Review or product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/reviews/delete/{productId}/{reviewId}": {
      "delete": {
        "tags": ["Review"],
        "description": "Delete a review for a product. Login is required.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to delete the review for."
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the review to delete."
          }
        ],
        "responses": {
          "200": { "description": "Review deleted successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Review or product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/reviews/{productId}": {
      "get": {
        "tags": ["Review"],
        "description": "Retrieve all reviews for a product. Login is required.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product to retrieve reviews for."
          }
        ],
        "responses": {
          "200": { "description": "Reviews retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },
    "/reviews/{productId}/{reviewId}": {
      "get": {
        "tags": ["Review"],
        "description": "Retrieve a specific review for a product. Login is required.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the product the review belongs to."
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the review to retrieve."
          }
        ],
        "responses": {
          "200": { "description": "Review retrieved successfully." },
          "401": { "description": "Unauthorized access." },
          "404": { "description": "Review or product not found." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/images": {
      "put": {
        "tags": ["Image Upload"],
        "summary": "Upload or update an image",
        "description": "Uploads a new image or updates an existing image for a user or product. The request must include either the `x-user-id` or `x-product-id` header to identify the target entity.",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "x-user-id",
            "in": "header",
            "description": "The ID of the user to upload/update the image for. Required if uploading a user avatar.",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-product-id",
            "in": "header",
            "description": "The ID of the product to upload/update the image for. Required if uploading a product image.",
            "required": false,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "description": "The image file to upload.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Image updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Image updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "newKey": {
                      "type": "string",
                      "example": "uploads/userAvatar-12345/example.png"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing required parameters or invalid input.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Bad request: Missing required parameters"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Failed to upload new image"
                }
              }
            }
          }
        }
      }
    }
  }
}
